#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cctype>

std::string normalize(const std::string &s) {
    std::string t;
    t.reserve(s.size());
    for (char c : s) {
        if (!std::isspace(static_cast<unsigned char>(c)))
            t += std::tolower(static_cast<unsigned char>(c));
    }
    return t;
}

int levenshtein(const std::string &s, const std::string &t) {
    int n = s.size(), m = t.size();
    if (n == 0) return m;
    if (m == 0) return n;
    std::vector<std::vector<int>> dp(n+1, std::vector<int>(m+1));
    for (int i = 0; i <= n; ++i) dp[i][0] = i;
    for (int j = 0; j <= m; ++j) dp[0][j] = j;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            int cost = (s[i-1] == t[j-1] ? 0 : 1);
            dp[i][j] = std::min({
                dp[i-1][j] + 1,       // borrado
                dp[i][j-1] + 1,       // inserción
                dp[i-1][j-1] + cost   // sustitución
            });
        }
    }
    return dp[n][m];
}

// threshold: porcentaje máximo de errores
bool fuzzyEqual(const std::string &a, const std::string &b, double threshold = 0.2) {
    std::string A = normalize(a);
    std::string B = normalize(b);
    int dist = levenshtein(A, B);
    int maxLen = std::max<int>(A.size(), B.size());
    if (maxLen == 0) return true;  
    double ratio = double(dist) / maxLen;
    return ratio <= threshold;
}

int main() {
    std::string s1 = "Justo Valverde";
    std::string s2 = "Justo Balberde";

    if (fuzzyEqual(s1, s2)) {
        std::cout << "¡Coinciden!" << std::endl;
    } else {
        std::cout << "No coinciden." << std::endl;
    }
    return 0;
}
